#!/usr/bin/env python3

import argparse
import os
import re
import signal
import subprocess
import sys
import time

parser = argparse.ArgumentParser(
    prog="ssmscp",
    description="Perform SSH over an SSM connection that has previously been set up with `ssmssh-setup`. "
    "Must do `aws sso login` first and make sure `AWS_PROFILE` is exported in your environment. "
    "Use `ubuntu@i-012345678` as the remote host where `i-012345678` "
    "is the EC2 instance ID, and `ubuntu` is the username you configured for this host with "
    "`ssmssh-setup`.",
)
parser.add_argument(
    "-P", "--port", type=int, default=1234, help="Local port number to use"
)
parser.add_argument(
    "-i",
    "--privatekey",
    type=str,
    default="~/.ssh/id_rsa",
    help="SSH private key to connect with",
)

args, sshargs = parser.parse_known_args()

port, privatekey = args.port, args.privatekey

targetmatch = re.compile(r"\S+@(i-[a-f0-9]{8,17})")
targetarg = list(filter(targetmatch.match, sshargs))
if len(targetarg) != 1:
    print("Did not find exactly one instance ID in destination", file=sys.stderr)
    exit(1)
target = targetmatch.match(targetarg[0])
targetid = target.group(1)
targetssh_orig = target.group(0)
targetssh_local = target.group(0).replace(targetid, "localhost")
sshargs[sshargs.index(targetssh_orig)] = targetssh_local

ssmproc = subprocess.Popen(
    [
        "aws",
        "ssm",
        "start-session",
        "--target",
        targetid,
        "--document-name",
        "AWS-StartPortForwardingSession",
        "--parameters",
        f'{{"portNumber":["22"],"localPortNumber":["{port}"]}}',
    ],
    start_new_session=True,
)
time.sleep(5)  # wait for SSM port to open

subprocess.run(
    [
        "ssh",
        "-X",
        "-p",
        str(port),
        "-i",
        privatekey,
        "-o",
        "StrictHostKeyChecking=no",
        "-o",
        "UserKnownHostsFile=/dev/null",
        *sshargs,
    ]
)

os.killpg(os.getpgid(ssmproc.pid), signal.SIGTERM)
